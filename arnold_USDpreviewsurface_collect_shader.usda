#usda 1.0

def "pCube1"
{
    def Mesh "pCubeShape1"
    {
        uniform bool doubleSided = 1
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
        rel material:binding = </materials/collect1>
        uniform token orientation = "rightHanded"
        point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
        uint primvars:arnold:id = 528272281
        bool primvars:arnold:smoothing = 1
        uchar primvars:arnold:subdiv_iterations = 0
        string primvars:dcc_name = "pCubeShape1" (
            elementSize = 1
            interpolation = "constant"
        )
        vector3f[] primvars:normals (
            elementSize = 24
            interpolation = "faceVarying"
        )
        vector3f[] primvars:normals.timeSamples = {
            0: [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0)],
        }
        int[] primvars:normals:indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
        float2[] primvars:st = [(0.375, 0), (0.625, 0), (0.375, 0.25), (0.625, 0.25), (0.375, 0.5), (0.625, 0.5), (0.375, 0.75), (0.625, 0.75), (0.375, 1), (0.625, 1), (0.875, 0), (0.875, 0.25), (0.125, 0), (0.125, 0.25)] (
            elementSize = 14
            interpolation = "faceVarying"
        )
        int[] primvars:st:indices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 9, 8, 1, 10, 11, 3, 12, 0, 2, 13]
        uniform token subdivisionScheme = "none"
        matrix4d xformOp:transform.timeSamples = {
            0: ( (167.3291778564453, 0, 0, 0), (0, 167.3291778564453, 0, 0), (0, 0, 167.3291778564453, 0), (0, 0, 0, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def "materials"
{
    def Material "collect1"
    {
        float2 inputs:bound_st = (0, 0)
        vector3f inputs:bound_uv = (0, 0, 0)
        float2 inputs:st = (0, 0)
        vector3f inputs:uv = (0, 0, 0)
        token outputs:arnold:surface.connect = </aiStandardSurface1.outputs:shader>
        token outputs:surface.connect = </materials/collect1/main.outputs:surface>

        def Shader "main"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor.connect = </materials/collect1/diffuseColor.outputs:rgb>
            token outputs:displacement
            token outputs:surface
        }

        def Shader "diffuseColor"
        {
            uniform token info:id = "UsdUVTexture"
            float4 inputs:fallback = (0, 0, 0, 1)
            asset inputs:file = @apple.jpg@
            float2 inputs:st.connect = </materials/collect1/diffuseColor/TexCoordReader.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float outputs:a
            float outputs:r
            float3 outputs:rgb

            def Shader "TexCoordReader"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "st"
                float2 outputs:result
            }
        }
    }
}

def Shader "aiStandardSurface1"
{
    uniform token info:id = "arnold:standard_surface"
    color3f inputs:base_color = (1, 1, 1)
    prepend color3f inputs:base_color.connect = </aiImage1.outputs:out>
    string inputs:name = "aiStandardSurface1"
    token outputs:surface
}

def Shader "aiImage1"
{
    uniform token info:id = "arnold:image"
    string inputs:color_space = ""
    string inputs:filename = "./apple.tx"
    color4f inputs:missing_texture_color = (0, 0, 0, 1)
    string inputs:name = "aiImage1"
    color4f outputs:out
}

